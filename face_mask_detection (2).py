# -*- coding: utf-8 -*-
"""Face Mask Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zOR0m08gLlzWIH4TuZhM4Qb55usRu6EU

#Installing Dataset
"""

!pip install opendatasets --upgrade --quiet

dataset_url = "https://www.kaggle.com/datasets/ashishjangra27/face-mask-12k-images-dataset"
import opendatasets as od
od.download(dataset_url)

"""#Importing Libraries"""

# Commented out IPython magic to ensure Python compatibility.
import os
import torch
import torchvision
import tarfile
import torch.nn as nn
import numpy as np
import torch.nn.functional as F
from torchvision.datasets.utils import download_url
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
import torchvision.transforms as tt
from torch.utils.data import random_split
from torchvision.utils import make_grid
from torchvision import models
import matplotlib.pyplot as plt
from PIL import Image
from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix
from sklearn.model_selection import train_test_split
# %matplotlib inline

"""#Initializing the Data"""

data_path = "/content/face-mask-12k-images-dataset/Face Mask Dataset"
train_path = "/content/face-mask-12k-images-dataset/Face Mask Dataset/Train"
test_path = "/content/face-mask-12k-images-dataset/Face Mask Dataset/Test"
val_path = "/content/face-mask-12k-images-dataset/Face Mask Dataset/Validation"

"""Trasform data into tensors and some other transformations too.."""

transforms = tt.Compose([
    tt.Resize((224,224)),
    tt.ToTensor() ])

from torchvision.datasets import ImageFolder
from torchvision import transforms as tt

dataset = ImageFolder(data_path, transform=transforms)

train_ds = ImageFolder(train_path,  transform=transforms)

val_ds = ImageFolder(val_path, transform=transforms)

test_ds = ImageFolder(test_path, transform=transforms)

len(dataset), len(train_ds), len(val_ds), len(test_ds)

"""Convert Datasets into DataLoaders"""

batch_size = 32
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
val_dl = DataLoader(val_ds, batch_size*2)
test_dl = DataLoader(test_ds, batch_size)

len(train_dl), len(val_dl), len(test_dl)

"""Showing a batch of examples from the dataset..."""

def show_batch(dl):
    for images, labels in dl:
        fig, ax = plt.subplots(figsize=(16, 16))
        ax.set_xticks([]); ax.set_yticks([])
        ax.imshow(make_grid(images, nrow=12).permute(1, 2, 0))
        break

show_batch(train_dl)

def show_example(img, label):
    print('Label: ', train_ds.classes[label], "("+str(label)+")")
    plt.imshow(img.permute(1, 2, 0))

show_example(*train_ds[1000])

"""Classes are equaly distributed in all the datasets...

#Model

Designing a base class having all the step functions of training
"""

class Base(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['train_loss'], result['val_loss'], result['val_acc']))

        # print(f'Epoch: {epoch} | Train_loss: {result['train_loss']} | Val_loss:{result['val_loss']} | Val_acc: {result['val_acc']}')

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

"""Designing a class of Convolutional Neural Network derived from the Base Class"""

class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1):
        super(ResidualBlock, self).__init__()

        self.main_path = nn.Sequential(
            nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(out_channels),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(out_channels)
        )

        # Use 1x1 convolution to match dimensions if necessary
        self.shortcut = nn.Sequential()
        if stride != 1 or in_channels != out_channels:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(out_channels)
            )

    def forward(self, x):
        return nn.ReLU()(self.main_path(x) + self.shortcut(x))

IMAGE_WIDTH=224
IMAGE_HEIGHT=224
IMAGE_CHANNELS=3

import torch.nn as nn
import torch

class FaceMaskDetectionModel(Base):
    def __init__(self):
        super(FaceMaskDetectionModel, self).__init__()

        # Define the network layers
        self.network = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=32, kernel_size=(3, 3), stride=1, padding=1),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=(2, 2)),
            nn.Dropout(0.25),

            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(3, 3), stride=1, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=(2, 2)),
            nn.Dropout(0.25),

            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), stride=1, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=(2, 2)),
            nn.Dropout(0.25),

            nn. Flatten()
        )

        # Define the classifier layers
        self.classifier = nn.Sequential(
            nn.Linear(in_features=128 * 28 * 28, out_features=128),
            nn.BatchNorm1d(128),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(in_features=128, out_features=2)
        )

    def forward(self, x):
        # Pass the input through the network
        x = self.network(x)

        # Pass the output of the network through the classifier
        x = self.classifier(x)

        return x

model = FaceMaskDetectionModel()
print(model)

"""#GPU"""

# Assuming you have an instance of the model called 'model'
sample_input = torch.randn(1, 3, IMAGE_WIDTH, IMAGE_HEIGHT)  # Adjust the dimensions as per your input size
output_size = model.network[:8](sample_input).size()
print("Output size after the last convolutional layer:", output_size)

def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')

def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dl:
            yield to_device(b, self.device)

    def __len__(self):
        """Number of batches"""
        return len(self.dl)

device = get_default_device()
device

"""Loading Dataloaders to the GPU"""

train_dl = DeviceDataLoader(train_dl, device)
val_dl = DeviceDataLoader(val_dl, device)
test_dl = DeviceDataLoader(test_dl, device)
to_device(model, device)

"""#Training

Now Define Training steps for the model
"""

class EarlyStopping:
    def __init__(self, patience=5, delta=0):
        self.patience = patience
        self.delta = delta
        self.counter = 0
        self.best_score = None
        self.early_stop = False

    def __call__(self, val_loss):
        if self.best_score is None:
            self.best_score = val_loss
        elif val_loss > self.best_score + self.delta:
            self.counter += 1
            if self.counter >= self.patience:
                self.early_stop = True
        else:
            self.best_score = val_loss
            self.counter = 0

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)
def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.Adam):
    history = []
    optimizer = opt_func(model.parameters(), lr=0.001, betas=(0.9, 0.999), eps=1e-8, weight_decay=0.0, amsgrad=False
)
    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        model.epoch_end(epoch, result)
        history.append(result)
    return history

evaluate(model, val_dl)

"""Training the model to get the best predictions and accuracy..."""

lr = 0.001
num_epochs = 10
opt_func = torch.optim.Adam

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history1 = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)

lr = 0.0001
num_epochs = 5
opt_func = torch.optim.Adam

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history2 = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)

lr = 0.00001
num_epochs = 3
opt_func = torch.optim.Adam

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history3 = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)

lr = 0.000001
num_epochs = 3
opt_func = torch.optim.Adam

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history3 = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)

"""#Visualization

Loss Graph
"""

def plot_losses(history):
    train_losses = [x.get('train_loss') for x in history]
    val_losses = [x['val_loss'] for x in history]
    plt.plot(train_losses, '-bx')
    plt.plot(val_losses, '-rx')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['Training', 'Validation'])
    plt.title('Loss vs. No. of epochs');

plot_losses(history1)

"""Accuracy Graph"""

def plot_accuracies(history):
    accuracies = [x['val_acc'] for x in history]
    plt.plot(accuracies, '-x')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.title('Accuracy vs. No. of epochs');

plot_accuracies(history1)

evaluate(model, test_dl)

"""#Prediction

Testing the model's accuracy on Test Data by predicting some images..
"""

def predict_image(img, model):
    # Convert to a batch of 1
    xb = to_device(img.unsqueeze(0), device)
    # Get predictions from model
    yb = model(xb)
    # Pick index with highest probability
    _, preds  = torch.max(yb, dim=1)
    # Retrieve the class label
    return train_ds.classes[preds[0].item()]

img, label = test_ds[0]
plt.imshow(img.permute(1, 2, 0).clamp(0, 1))
print('Label:', train_ds.classes[label], ', Predicted:', predict_image(img, model))

# Get a batch of images from the train_loader
images, labels = next(iter(test_dl))
with torch.no_grad():
  predicted_labels = model(images.to(device))
  predicted_labels = torch.argmax(predicted_labels, 1)
rows = col = 3
#fig, axes = plt.subplots(nrows=5, ncols=5)
plt.figure(figsize = (13,13))
images = images.cpu()
for i in range(rows*col):
  # Plot a random image from the batch
  random_index = np.random.randint(0, images.shape[0])
  image = images[random_index]
  label = labels[random_index]
  pred_label = predicted_labels[random_index]
  plt.subplot(rows, col, i+1)
  plt.axis('off')
  plt.imshow(image.permute(1,2,0))
  # plt.title(f'Label: {test_ds.classes[label]}, Pred: {test_ds.classes[pred_label]}')
  title_text = f"Pred : {test_ds.classes[pred_label]} | Truth: {test_ds.classes[label]}"
  if pred_label == label:
    plt.title(title_text, fontsize=10, c="g")
  else:
    plt.title(title_text, fontsize=10, c="r")
  plt.axis(False)

import torch
from torchvision import transforms
from PIL import Image
import cv2
from google.colab.patches import cv2_imshow
# Define the pre-processing transform
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

# Load the model
model = FaceMaskDetectionModel()

# Load the image you want to predict
image_path = input("Path to image: ")  # Replace with the actual path to your image
image = Image.open(image_path).convert("RGB")
input_image = cv2.imread(image_path)

cv2_imshow(input_image)
# Pre-process the image
image_tensor = transform(image).unsqueeze(0)

# Set the model to evaluation mode
model.eval()

# Make a prediction
with torch.no_grad():
    output = model(image_tensor)

# Convert the output to probabilities using softmax
probabilities = torch.nn.functional.softmax(output[0], dim=0)

# Get the predicted class
predicted_class = torch.argmax(probabilities).item()

# Get the probability for the predicted class
predicted_probability = probabilities[predicted_class].item()

# Define class labels
class_labels = ['without mask', 'with mask']

# Print the prediction result
print(f"Predicted Class: {class_labels[predicted_class]}")
print(f"Probability: {predicted_probability:.4f}")

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
import torch

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (224,224))

input_image_scaled = np.array(input_image_resized) / 255.0

tensor_image = torch.from_numpy(input_image_scaled).permute(2, 0, 1).unsqueeze(0)
tensor_image = tensor_image.float()

if not next(model.parameters()).is_cuda and tensor_image.is_cuda:
  model.cuda()
  print('The model has been moved to the GPU.')
elif next(model.parameters()).is_cuda and not tensor_image.is_cuda:
  tensor_image = tensor_image.cuda()
  print('The input tensor has been moved to the GPU.')
if not isinstance(tensor_image, torch.cuda.FloatTensor) and next(model.parameters()).is_cuda:
  tensor_image = tensor_image.cuda()
  print('The input tensor has been converted to a CUDA tensor.')

output = model(tensor_image)
print(output)
prediction = torch.argmax(output, axis=1)
print(prediction)
if prediction == 1:
  print("Masked")
else:
  print("Unmasked")

torch.save(model, 'facemask_detection_model_f.pth')

torch.save(model.state_dict(), 'facemask_model_statedict1_f.pth')

